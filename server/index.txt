const express = require('express');
const app =express();
const { ApolloServer } = require('@apollo/server');
const {expressMiddleware} = require('@apollo/server/express4');
const bodyParser = require('body-parser');
const cors = require('cors');

async function startServer(){
    const app =express();
    const server = new ApolloServer({
        typeDefs:`
            type Todo {
                id:ID!
                title:String!
                completed:Boolean
            }
            type Query {
                getTodos:[Todo]
            }
        `,
        resolvers:{
            Query:{
                getTodos:()=>[{id:1,title:'Anything',completed:false}]
            }
        }
    });
    app.use(bodyParser.json());
    app.use(cors());

    await server.start();

    app.use('/graphql',expressMiddleware(server));

    app.listen(7000,()=>console.log(`server started at 7000`))
}

startServer();


const { ApolloServer } = require('@apollo/server');
const axios =require('axios');

const server = new ApolloServer({
    typeDefs:`
        type Todo {
            id:ID!
            title:String!
            completed:Boolean
            userId:ID!
        }
        type User {
            id:ID!
            name:String!
            username:String!
            email:String!
            address:Address
        }
        type Address {
            street:String!
            suite:String!
            city: String!
            zipcode: String!
        }
        type Query {
            getTodos:[Todo]
            getAllUsers:[User]
            getUser(id:ID!):User
        }
    `,
    resolvers:{
        Query:{
            getTodos:()=> axios.get(`https://jsonplaceholder.typicode.com/todos`).then(res=>{
                return res.data
            }),
            getAllUsers:async()=>(await axios.get(`https://jsonplaceholder.typicode.com/users`)).data,
            getUser:async(parent,{id})=>(await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`)).data
        }
    }
});

module.exports=server;